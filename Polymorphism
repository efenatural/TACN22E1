using System;

namespace EmployeeComparisonApp
{
    // Define the IQuittable interface
    public interface IQuittable
    {
        // Define a method signature for Quit, no implementation here
        void Quit();
    }

    // Employee class definition which now implements the IQuittable interface
    public class Employee : IQuittable
    {
        // Property to store employee's unique identifier
        public int Id { get; set; }

        // Property to store employee's first name
        public string FirstName { get; set; }

        // Property to store employee's last name
        public string LastName { get; set; }

        // Overloading the '==' operator to compare two Employee objects by their Id property
        public static bool operator ==(Employee emp1, Employee emp2)
        {
            // Check for null on both sides to handle cases where either or both objects are null
            if (ReferenceEquals(emp1, null) && ReferenceEquals(emp2, null)) return true;
            if (ReferenceEquals(emp1, null) || ReferenceEquals(emp2, null)) return false;

            // Compare Id properties
            return emp1.Id == emp2.Id;
        }

        // Overloading the '!=' operator as required to complement the '==' operator overload
        public static bool operator !=(Employee emp1, Employee emp2)
        {
            return !(emp1 == emp2); // Use '==' operator logic and invert it for '!='
        }

        // Overriding Equals method to ensure consistency with operator overloading
        public override bool Equals(object obj)
        {
            if (obj is Employee other)
            {
                return Id == other.Id;
            }
            return false;
        }

        // Overriding GetHashCode to ensure compatibility with Equals override
        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }

        // Implementing the Quit method from IQuittable interface
        public void Quit()
        {
            // Print a message indicating the employee has quit
            Console.WriteLine($"{FirstName} {LastName} (ID: {Id}) has quit the job.");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Instantiate an Employee object and assign values
            Employee employee = new Employee
            {
                Id = 1,
                FirstName = "John",
                LastName = "Doe"
            };

            // Use polymorphism to create an object of type IQuittable
            IQuittable quittableEmployee = employee;

            // Call the Quit method on the IQuittable object
            quittableEmployee.Quit();

            // Output the result to verify the Quit method works as expected
            Console.WriteLine("Quit method was successfully called on IQuittable type.");
        }
    }
}
